import org.gradle.internal.os.OperatingSystem

plugins {
    id "java"
    id "application"
    id "org.openjfx.javafxplugin" version "0.0.13"
    id "org.beryx.runtime" version "1.12.7"

    // versioning now in version.properties file
    // https://github.com/ethauvin/semver-gradle
    id "net.thauvin.erik.gradle.semver" version "1.0.4"
}

// save version to main resources
// version bump by .\gradlew incrementPatch ... incrementMinor
// gradle -Dversion.prerelease=beta incrementPatch
// version with -beta is currently not supported by jpackage (maybe windows --app-version)
// java.lang.IllegalArgumentException: "Version [3.0.0-beta] contains invalid component [0-beta]"
semver {
    properties = "src/main/resources/imajarversion.properties"
}

// version is now in version.properties
group = "net.rs.lamsi"
description = "ImaJar"

java {
    sourceCompatibility = "19"
    targetCompatibility = "19"
}
defaultTasks "test", "jpackage"

// Check the OS
project.ext.osSuffix = OperatingSystem.current().getName().replaceAll(" ", "_")
if (OperatingSystem.current().isMacOsX()) project.ext.osSuffix = "macOS"
if (OperatingSystem.current().isLinux()) project.ext.osSuffix = "Linux"
if (OperatingSystem.current().isWindows()) project.ext.osSuffix = "Windows"
println "OS detected as " + project.ext.osSuffix


repositories {
    // TODO change to mavenCentral()
    mavenCentral()
    // mavenLocal()
    maven { url = "https://repo.maven.apache.org/maven2" }
    // local libraries
    maven { url = "file://" + projectDir + "/src/main/lib" }
    // For jmztab 3.0.9+ (https://github.com/PRIDE-Utilities/jmzTab)
    maven { url = "https://lifstools.jfrog.io/artifactory/ebi-tools/" }
    // For jmzml, etc.
    maven { url = "https://www.ebi.ac.uk/Tools/maven/repos/content/groups/ebi-repo/" }
    // For SIRIUS ID modules
    maven { url = "https://bio.informatik.uni-jena.de/repository/libs-oss/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://www.xypron.de/repository/" }
    // For cpdetector
    maven { url = "https://nexus.nuiton.org/nexus/content/groups/releases/" }
//    // For jimzml
//    maven { url = "https://mvnrepository.com/artifact/com.alanmrace/jimzmlparser" }
}

ext {
    msdkVersion = "0.0.27"
    cdkVersion = "2.5"
    jmztabVersion = "3.0.9"
    swaggerVersion = "1.5.22"
    okhttpVersion = "2.7.5"
    guavaVersion = "30.1-jre"
    poiVersion = '5.0.0'
    batikVersion = '1.14'
    controlsfxVersion = '11.1.1'
    jmzTabmVersion = "1.0.6"
    jnaVersion = '5.12.1'
    junitversion = '5.9.1'
    mockitoversion = '4.9.0'
    jacksonVersion = '2.13.4'

    // UUID for upgrades of this package on Windows. Generated by https://www.uuidgenerator.net 
    win_uuid = "896e9c2d-6db8-4259-a1af-1b5f8112d1e1"
}

dependencies {
    // ImaJar version parsing
    implementation 'com.vdurmont:semver4j:3.1.0'
//    implementation "org.graphstream:gs-core:2.0"
    // use patched version via jitpack from https://github.com/robinschmid/gs-core/tree/patch-1
    implementation "org.jfree:jfreechart:1.5.3"
    implementation "org.jfree:org.jfree.chart.fx:2.0.1"
    implementation "org.jfree:org.jfree.fxgraphics2d:2.1.1"
    implementation "org.jfree:org.jfree.svg:4.1"
    implementation "org.jfree:org.jfree.pdf:2.0"
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "org.apache.commons:commons-math3:3.5"
    implementation "edu.ucar:netcdf4:4.5.5"
    implementation "org.ostermiller:utils:1.07.00"
    implementation 'nz.ac.waikato.cms.weka:weka-stable:3.8.6'
    implementation 'net.sourceforge.jmol:jmol:14.31.10'
    implementation "org.apache.poi:poi:$poiVersion"
    implementation "org.apache.poi:poi-ooxml:$poiVersion"
    implementation "org.openscience.cdk:cdk-core:$cdkVersion"
    implementation "org.openscience.cdk:cdk-io:$cdkVersion"
    implementation "org.openscience.cdk:cdk-standard:$cdkVersion"
    implementation "org.openscience.cdk:cdk-silent:$cdkVersion"
    implementation "org.openscience.cdk:cdk-formula:$cdkVersion"
    implementation "org.openscience.cdk:cdk-sdg:$cdkVersion"
    implementation "org.openscience.cdk:cdk-renderbasic:$cdkVersion"
    implementation "org.openscience.cdk:cdk-renderawt:$cdkVersion"
    implementation "org.openscience.cdk:cdk-data:$cdkVersion"
    implementation "org.openscience.cdk:cdk-interfaces:$cdkVersion"
    implementation "org.openscience.cdk:cdk-smiles:$cdkVersion"
    implementation "uk.ac.ebi.jmzml:jmzml:1.7.11"
    implementation "uk.ac.ebi.pride:jmztab-modular-model:$jmztabVersion"
    implementation "uk.ac.ebi.pride:jmztab-modular-util:$jmztabVersion"
    implementation 'org.apache.xmlgraphics:fop:2.6'
    implementation "org.freehep:freehep-graphicsio-emf:2.4"
    implementation "io.github.msdk:msdk-io-mzml:$msdkVersion"
    implementation "io.github.msdk:msdk-io-netcdf:$msdkVersion"
    implementation "io.github.msdk:msdk-featuredetection-adap3d:$msdkVersion"

    implementation group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
    implementation 'org.eclipse.parsson:jakarta.json:1.1.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    implementation group: 'org.openscience.cdk', name: 'cdk-bundle', version: '2.7.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
//    implementation "io.github.msdk:msdk-id-sirius:$msdkVersion"

    implementation "org.xerial:sqlite-jdbc:3.8.11.2"
    implementation 'it.unimi.dsi:fastutil:8.5.6'
    implementation 'com.itextpdf:itextpdf:5.5.13.2'
    implementation 'org.apache.xmlgraphics:xmlgraphics-commons:2.6'
    implementation "org.apache.xmlgraphics:batik-util:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-transcoder:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-codec:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-ext:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-awt-util:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-dom:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-svggen:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-svg-dom:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-anim:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-rasterizer:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-swing:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-gui-util:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-ttf2svg:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-parser:$batikVersion"
    implementation "net.sf.epsgraphics:epsgraphics:1.2"
    implementation "com.miglayout:miglayout:3.7.4"
    implementation "com.miglayout:miglayout-swing:5.0"
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation "com.sun.xml.bind:jaxb-core:2.3.0.1"
    implementation "com.sun.xml.bind:jaxb-impl:2.3.2"
    implementation "javax.activation:javax.activation-api:1.2.0"
    implementation "javax.mail:javax.mail-api:1.6.2"
    implementation "io.swagger:swagger-annotations:$swaggerVersion"
    implementation "com.squareup.okhttp:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp:logging-interceptor:$okhttpVersion"
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation "org.threeten:threetenbp:1.3.8"
    implementation 'org.json:json:20211205'
    implementation "com.github.oshi:oshi-core:4.5.2"
    implementation "de.isas.mztab:jmztabm-io:$jmzTabmVersion"
    implementation 'net.java.dev.jna:jna:$jnaVersion'
    implementation 'com.github.robinschmid:jimzMLParser:mzmine_local_obo-SNAPSHOT'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
    implementation "net.csibio.aird:aird-sdk:1.1.6.1"
    implementation "com.github.yannrichet:JMathPlot:1.0.1"
    implementation "org.slf4j:slf4j-api:1.7.5"
    implementation "org.slf4j:slf4j-log4j12:1.7.5"
    // https://mvnrepository.com/artifact/log4j/apache-log4j-extras
//    implementation group: 'log4j', name: 'apache-log4j-extras', version: '1.2.17'

    implementation "net.lingala.zip4j:zip4j:1.3.2"
    implementation "com.github.albfernandez:juniversalchardet:2.0.0"


    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitversion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitversion"
    testImplementation "org.mockito:mockito-inline:$mockitoversion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoversion"
    testImplementation "org.hamcrest:hamcrest-library:1.3"

//    https://blog.gradle.org/log4j-vulnerability
//    constraints {
//        implementation("org.apache.logging.log4j:log4j-core") {
//            version {
//                strictly("[2.17, 3[")
//                prefer("2.17.1")
//            }
//            because("CVE-2021-44228, CVE-2021-45046, CVE-2021-45105: Log4j vulnerable to remote code execution and other critical security vulnerabilities")
//        }
//    }
}

/*
 * Remove the xml-apis dependencies to avoid a compilation error in Eclipse.
 * The org.w3c.dom package is present in the java.xml module as well as in these dependencies.
 * That is illegal (https://bugs.eclipse.org/bugs/show_bug.cgi?id=536928).
 */
configurations.all {
    exclude group: "xml-apis", module: "xml-apis"
    exclude group: "xml-apis", module: "xml-apis-ext"
    exclude group: "xom", module: "xom"
    exclude group: "ch.qos.logback", module: "logback-core"
    exclude group: "ch.qos.logback", module: "logback-classic"
    exclude group: "gurobi", module: "gurobi-linux64"
    exclude group: "cplex", module: "cplex"
    exclude group: "org.checkerframework", module: "checker-qual"
    exclude group: "javax.annotation", module: "javax.annotation-api"
}


/*
 * Include JavaFX modules
 */
javafx {
    version = "16"
    modules = ["javafx.controls",
               "javafx.swing",
               "javafx.fxml",
               "javafx.web",
               "javafx.graphics"]
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs += ['--enable-preview']
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}

/*
 * Set the basic Java runtime parameters (heap size etc.)
 */
application {
    mainClass.set("net.rs.lamsi.multiimager.Frames.ImageEditorWindow")
    applicationName = "ImaJar"
}

/*
 * Build the JVM runtime using jlink
 */
runtime {
    options = ["--compress=2", "--vm=server", "--no-header-files", "--no-man-pages", "--output", "jre/jre"]
    modules = ["java.desktop",
               "java.logging",
               "java.net.http",
               "java.rmi",
               "java.sql",
               "java.datatransfer",
               "java.management",
               "java.xml",
               "java.xml.crypto",
               "jdk.xml.dom",
               "java.naming",
               "java.transaction.xa",
               "java.scripting",
               "java.compiler",
               "jdk.jsobject",
               "jdk.jfr",
               "java.security.sasl",
               "java.security.jgss",
               "jdk.unsupported",
               "jdk.unsupported.desktop"]
    jpackage {
        if (OperatingSystem.current().isWindows()) {
            // The WiX toolset must be installed, see https://wixtoolset.org/releases/
            installerType = "msi"
            installerName = "ImaJar_Windows_installer"
            // additional options for jpackage
            imageOptions = ["--icon", "src/main/resources/ImaJarIcon.ico",
                            "--add-launcher", "ImaJar_console=gradle/win_console_launcher.properties"
            ]
            installerOptions = ["--win-menu",
                                "--win-menu-group", "ImaJar",
                                "--win-shortcut",
                                "--win-dir-chooser",
                                "--win-upgrade-uuid", "$win_uuid",
                                "--license-file", "LICENSE.txt"
            ]
        }
        if (OperatingSystem.current().isMacOsX()) {
            installerType = "dmg"
            // additional options for jpackage
            imageOptions = ["--icon", "src/main/resources/ImaJarIcon.icns"]
            installerOptions = ["--license-file", "LICENSE.txt"]
            installerName = "ImaJar_macOS_installer"
        }
        if (OperatingSystem.current().isLinux()) {
            // leave installer type empty to generate all that match
            // for rpm, rpmbuild and rpm tools need to be installed, installerType needs to be set to "rpm"
            // installerType = "deb"
            // additional options for jpackage
            imageOptions = ["--icon", "src/main/resources/ImaJarIcon.png"]
            installerOptions = ["--linux-shortcut",
                                "--linux-menu-group", "ImaJar",
                                "--license-file", "LICENSE.txt",
                                "--linux-deb-maintainer", "plusik@gmail.com"]

            installerName = "ImaJar_Linux_installer"
        }
        imageName = "ImaJar"
        jvmArgs = ["-showversion",
                   "-XX:MaxHeapFreeRatio=100",
                   "-XX:InitialRAMPercentage=30",
                   "-XX:MinRAMPercentage=80",
                   "-XX:MaxRAMPercentage=80",
                   "-enableassertions",
//                   "-Djava.util.logging.config.class=io.LoggingConfiguration",
                   "--enable-preview"]
    }
}

/*
 * This is important in order to copy all .java, .fxml, and help files into the final jar.
 * The .java files are only for people who want to check the source codes.
 * But the .fxml and help files are required for the GUI.
 */
jar {
    sourceSets.main.resources.srcDirs += ["src/main/java"]
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

